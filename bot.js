require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const fs = require('fs');
const sharp = require('sharp');
const axios = require('axios');
const path = require('path');

const bot = new Telegraf(process.env.BOT_TOKEN);

// API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Mistral —á–µ—Ä–µ–∑ Together AI
const MISTRAL_API_KEY = process.env.MISTRAL_API_KEY;
const MISTRAL_API_URL = 'https://api.mistral.ai/v1/chat/completions';

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async function processImage(inputPath, outputPath, width, height, position) {
  await sharp(inputPath)
    .resize({ width, height, fit: 'cover', position })
    .jpeg({ quality: 80 })
    .toFile(outputPath);
}

const userImages = {};

bot.start(async (ctx) => {
  await ctx.reply('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞!');
});

async function handleImage(ctx, fileId) {
  try {
    const fileUrl = await ctx.telegram.getFileLink(fileId);
    const inputPath = path.join(__dirname, 'temp', `${ctx.chat.id}.jpg`);
    const response = await axios({ url: fileUrl.href, responseType: 'arraybuffer' });
    fs.writeFileSync(inputPath, response.data);
    userImages[ctx.chat.id] = inputPath;

    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–±—Ä–µ–∑–∫–∏ –¥–ª—è 1110x398:', Markup.inlineKeyboard([
      [Markup.button.callback('üîº –í–µ—Ä—Ö', 'crop_1110x398_north')],
      [Markup.button.callback('üîΩ –ù–∏–∑', 'crop_1110x398_south')],
      [Markup.button.callback('üî≥ –¶–µ–Ω—Ç—Ä', 'crop_1110x398_center')],
    ]));

    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–±—Ä–µ–∑–∫–∏ –¥–ª—è 345x250:', Markup.inlineKeyboard([
      [Markup.button.callback('üîº –í–µ—Ä—Ö', 'crop_345x250_north')],
      [Markup.button.callback('üîΩ –ù–∏–∑', 'crop_345x250_south')],
      [Markup.button.callback('üî≥ –¶–µ–Ω—Ç—Ä', 'crop_345x250_center')],
    ]));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.');
  }
}

bot.on('photo', async (ctx) => {
  const fileId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
  await handleImage(ctx, fileId);
});

bot.on('document', async (ctx) => {
  const file = ctx.message.document;
  if (file.mime_type.startsWith('image/')) {
    await handleImage(ctx, file.file_id);
  } else {
    await processText(ctx, file);
  }
});

async function processText(ctx, file) {
  const text = file.text || '–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω';

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
  await ctx.replyWithChatAction('typing');

  try {
    const response = await axios.post(MISTRAL_API_URL, {
      model: 'mistral-medium-latest', // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –º–æ—â–Ω—É—é –º–æ–¥–µ–ª—å
      temperature: 0.7, // –£–º–µ–Ω—å—à–∏—Ç–µ randomness
      top_p: 0.9, // –£–º–µ–Ω—å—à–∏—Ç–µ randomness
      max_tokens: 500, // –£–≤–µ–ª–∏—á—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
      stream: false,
      messages: [
        {
          role: 'system',
          content: '–¢—ã ‚Äî SEO-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç. –°—Ñ–æ—Ä–º–∏—Ä—É–π 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ SEO title –∏ description –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–∞–∫–æ–π:\n\n### –í–∞—Ä–∏–∞–Ω—Ç 1:\n**Title:** [–ó–∞–≥–æ–ª–æ–≤–æ–∫]\n**Description:** [–û–ø–∏—Å–∞–Ω–∏–µ]\n\n### –í–∞—Ä–∏–∞–Ω—Ç 2:\n**Title:** [–ó–∞–≥–æ–ª–æ–≤–æ–∫]\n**Description:** [–û–ø–∏—Å–∞–Ω–∏–µ]\n\n–ò —Ç–∞–∫ –¥–∞–ª–µ–µ. –ù–µ –æ—Ç–∫–ª–æ–Ω—è–π—Å—è –æ—Ç —ç—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π HTML-—Ç–µ–≥–∏, —Å–ª—É—á–∞–π–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–µ —Å–ª–æ–≤–∞.',
        },
        {
          role: 'user',
          content: `–°—Ñ–æ—Ä–º–∏—Ä—É–π 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ SEO title –∏ description –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: ${text}`,
        },
      ],
      response_format: {
        type: 'text',
      },
    }, {
      headers: {
        'Authorization': `Bearer ${MISTRAL_API_KEY}`,
        'Content-Type': 'application/json',
      },
    });

    console.log('–û—Ç–≤–µ—Ç –æ—Ç Mistral API:', response.data);
    const seoText = response.data.choices && response.data.choices[0]?.message?.content;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if (!seoText || seoText.includes('<') || seoText.includes('>') || seoText.includes('http')) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Mistral API');
    }

    if (seoText) {
      const maxLength = 4096;
      for (let i = 0; i < seoText.length; i += maxLength) {
        await ctx.reply(`üìå SEO-–∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ (—á–∞—Å—Ç—å ${i / maxLength + 1}):\n\n${seoText.slice(i, i + maxLength)}`);
      }
    } else {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å SEO-–∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞.');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

bot.on('text', async (ctx) => {
  await processText(ctx, { file_id: null, text: ctx.message.text });
});

bot.action(/^crop_(\d+x\d+)_(north|center|south)$/, async (ctx) => {
  const [, size, position] = ctx.match;
  const inputPath = userImages[ctx.chat.id];
  if (!inputPath || !fs.existsSync(inputPath)) {
    return ctx.reply('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ—â—ë —Ä–∞–∑.');
  }

  const [width, height] = size.split('x').map(Number);
  const positions = { north: 'north', center: 'center', south: 'south' };
  const outputPath = path.join(__dirname, 'temp', `${ctx.chat.id}_${size}.jpg`);

  await processImage(inputPath, outputPath, width, height, positions[position]);
  await ctx.replyWithPhoto({ source: outputPath }, { caption: `${size} (${position})` });
  fs.unlinkSync(outputPath);
});

bot.launch();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');

