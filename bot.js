require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const fs = require('fs');
const sharp = require('sharp');
const axios = require('axios');
const path = require('path');

const bot = new Telegraf(process.env.BOT_TOKEN);

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ–±—Ä–µ–∑–∫–∏
async function processImage(inputPath, outputPath, width, height, position) {
    await sharp(inputPath)
        .resize({ width, height, fit: 'cover', position }) // –í—ã–±–∏—Ä–∞–µ–º —Ñ–æ–∫—É—Å –æ–±—Ä–µ–∑–∫–∏
        .jpeg({ quality: 80 }) // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ –±–µ–∑ –≤–∏–¥–∏–º–æ–π –ø–æ—Ç–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        .toFile(outputPath);
}

// –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ WebP ‚Üí JPEG
async function convertWebPtoJPEG(inputPath, outputPath) {
    try {
        await sharp(inputPath).jpeg({ quality: 90 }).toFile(outputPath);
        return outputPath;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ WebP:', error);
        return null;
    }
}

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
bot.start(async (ctx) => {
    await ctx.reply('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞!');
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ñ–æ—Ç–æ (–∫–ª—é—á - ID —á–∞—Ç–∞)
const userImages = {};

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –ø–æ–∫–∞–∑ –∫–Ω–æ–ø–æ–∫)
async function handleImage(ctx, fileId, mimeType) {
    try {
        await ctx.reply('–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–µ–∑–∫–∏.');

        const fileUrl = await ctx.telegram.getFileLink(fileId);
        const inputPath = path.join(__dirname, 'temp', `${ctx.chat.id}.jpg`);

        // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        const response = await axios({ url: fileUrl.href, responseType: 'arraybuffer' });
        fs.writeFileSync(inputPath, response.data);

        // –ï—Å–ª–∏ WebP ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JPEG
        if (mimeType === 'image/webp') {
            const jpegPath = path.join(__dirname, 'temp', `${ctx.chat.id}_converted.jpg`);
            await convertWebPtoJPEG(inputPath, jpegPath);
            fs.unlinkSync(inputPath); // –£–¥–∞–ª—è–µ–º WebP
            userImages[ctx.chat.id] = jpegPath; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø—É—Ç—å
        } else {
            userImages[ctx.chat.id] = inputPath;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        await ctx.reply(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–±—Ä–µ–∑–∫–∏ –¥–ª—è 1110x398:',
            Markup.inlineKeyboard([
                [Markup.button.callback('üîº –í–µ—Ä—Ö', `crop_1110x398_north`)],
                [Markup.button.callback('üîΩ –ù–∏–∑', `crop_1110x398_south`)],
                [Markup.button.callback('üî≥ –¶–µ–Ω—Ç—Ä', `crop_1110x398_center`)],
            ])
        );

        await ctx.reply(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–±—Ä–µ–∑–∫–∏ –¥–ª—è 345x250:',
            Markup.inlineKeyboard([
                [Markup.button.callback('üîº –í–µ—Ä—Ö', `crop_345x250_north`)],
                [Markup.button.callback('üîΩ –ù–∏–∑', `crop_345x250_south`)],
                [Markup.button.callback('üî≥ –¶–µ–Ω—Ç—Ä', `crop_345x250_center`)],
            ])
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.');
    }
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ç–æ
bot.on('photo', async (ctx) => {
    const fileId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
    await handleImage(ctx, fileId, 'image/jpeg');
});

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
bot.on('document', async (ctx) => {
    const file = ctx.message.document;
    if (file.mime_type.startsWith('image/')) {
        await handleImage(ctx, file.file_id, file.mime_type);
    } else {
        await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ–±—Ä–µ–∑–∫–∏
bot.action(/^crop_(\d+x\d+)_(north|center|south)$/, async (ctx) => {
    const [, size, position] = ctx.match; // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    const inputPath = userImages[ctx.chat.id];
    if (!inputPath || !fs.existsSync(inputPath)) {
        return ctx.reply('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ—â—ë —Ä–∞–∑.');
    }

    const [width, height] = size.split('x').map(Number);
    const positions = { north: 'north', center: 'center', south: 'south' };
    const outputPath = path.join(__dirname, 'temp', `${ctx.chat.id}_${size}.jpg`);

    await processImage(inputPath, outputPath, width, height, positions[position]);

    await ctx.replyWithPhoto({ source: outputPath }, { caption: `${size} (${position})` });

    fs.unlinkSync(outputPath);
});

// –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –ø–∏–Ω–≥
setInterval(() => {
    console.log("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç...");
}, 5 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
